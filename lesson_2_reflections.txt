What happens when you initialize a repository? Why do you need to do it?

    On initializing a repository (using git init), git converts the directory into
    a repository and add a configuration file (.git) yo the directory. We need to do it 
    in order to convert the directory to a repository to be able to use features of git 
    such as commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is different from the working directory and repository in that
    it acts as an intermediary between these two; We can add files (or remove them)
    which we want to be present in a single commit to the staging area. Thus, it provides
    kind of a failsafe against erronous or mistenkly done commits, and also provides
    the ability to add specific files to a commit.

How can you use the staging area to make sure you have one commit per logical
change?

    We can use git diff --staged to see the differences between the staging area and
    the latest commit, in order to make sure that we have only one commit per logical
    change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches would be helpful in cases where we want to experiment with our project
    in a way that the main project isn't ready for yet, so we can use branches to
    maintain the experimental changes apart from the main project.

How do the diagrams help you visualize the branch structure?

    Diagrams can make it easier to interpret the structure of various branches in 
    our project by showing exactly where the branching took place, the reachability
    of commits, what would have to be done in order to merge certain branches etc.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
